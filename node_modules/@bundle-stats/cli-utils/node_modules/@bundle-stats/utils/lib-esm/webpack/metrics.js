"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.metrics = void 0;

var _metrics = require("../config/metrics");

const metrics = {
  totalSizeByTypeALL: {
    label: 'Bundle Size',
    description: 'Sum of all assets.',
    type: _metrics.METRIC_TYPE_FILE_SIZE
  },
  totalInitialSizeJS: {
    label: 'Initial JS',
    description: 'Sum of all JS assets that are loaded initially(eg: `vendor.js`, `app.js`).',
    type: _metrics.METRIC_TYPE_FILE_SIZE
  },
  totalInitialSizeCSS: {
    label: 'Initial CSS',
    description: 'Sum of all CSS assets that are loaded initially(eg: `vendor.css`, `app.css`).',
    type: _metrics.METRIC_TYPE_FILE_SIZE
  },
  cacheInvalidation: {
    label: 'Cache Invalidation',
    description: 'Ratio between the total of changed assets and the total bundle size.',
    type: _metrics.METRIC_TYPE_PERCENTAGE,
    biggerIsBetter: false
  },
  moduleCount: {
    label: 'Modules',
    description: 'Total number of modules bundled by webpack.',
    type: _metrics.METRIC_TYPE_NUMERIC,
    biggerIsBetter: false
  },
  chunkCount: {
    label: 'Chunks',
    description: 'Total number of chunks generated by webpack.',
    type: _metrics.METRIC_TYPE_NUMERIC,
    biggerIsBetter: false
  },
  assetCount: {
    label: 'Assets',
    description: 'Total number of assets outputted by webpack.',
    type: _metrics.METRIC_TYPE_NUMERIC,
    biggerIsBetter: false
  },
  packageCount: {
    label: 'Packages',
    description: 'Total number of packages bundled by webpack.',
    type: _metrics.METRIC_TYPE_NUMERIC,
    biggerIsBetter: false
  },
  duplicatePackagesCount: {
    label: 'Duplicate Packages',
    description: 'Total number of packages that are duplicated.',
    type: _metrics.METRIC_TYPE_NUMERIC,
    biggerIsBetter: false
  },
  sizes: {
    totalSizeByTypeJS: {
      label: 'JS',
      type: _metrics.METRIC_TYPE_FILE_SIZE
    },
    totalSizeByTypeCSS: {
      label: 'CSS',
      type: _metrics.METRIC_TYPE_FILE_SIZE
    },
    totalSizeByTypeIMG: {
      label: 'IMG',
      type: _metrics.METRIC_TYPE_FILE_SIZE
    },
    totalSizeByTypeMEDIA: {
      label: 'Media',
      type: _metrics.METRIC_TYPE_FILE_SIZE
    },
    totalSizeByTypeFONT: {
      label: 'Fonts',
      type: _metrics.METRIC_TYPE_FILE_SIZE
    },
    totalSizeByTypeHTML: {
      label: 'HTML',
      type: _metrics.METRIC_TYPE_FILE_SIZE
    },
    totalSizeByTypeOTHER: {
      label: 'Other',
      type: _metrics.METRIC_TYPE_FILE_SIZE
    }
  }
};
exports.metrics = metrics;